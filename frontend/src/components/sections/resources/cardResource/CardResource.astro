---
import ContainerLink from '@/components/common/ContainerLink.astro';
import { extractDriveFileId } from '@/lib/extractDriveFileId';
import HeaderCardResource from './HeaderCardResource.astro';
import IconDownload from '@/assets/icons/IconDownload.astro';
import IconVisibility from '@/assets/icons/IconVisibility.astro';
import IconVisibilityOff from '@/assets/icons/IconVisibilityOff.astro';

interface Props {
  title: string;
  urlDrive: string;
  type: string;
  mostRecent: boolean;
}

const { title, urlDrive, type, mostRecent } = Astro.props;
const partsTitle = title.split('.');

const fileId = extractDriveFileId(urlDrive);
const previewUrl = fileId ? `https://drive.google.com/file/d/${fileId}/preview` : '#';
const downloadUrl = fileId ? `https://drive.google.com/uc?export=download&id=${fileId}` : '#';
const cardId = `card-${Math.random().toString(36).substr(2, 9)}`;
---

<div
  id={cardId}
  class='flex flex-col bg-gradient-to-br from-zinc-900/90 to-zinc-950/95 border border-zinc-800/60 rounded-xl hover:border-zinc-700/80 transition-all duration-300 group overflow-hidden'
>
  <HeaderCardResource
    fileFormat={partsTitle[1]}
    title={partsTitle[0]}
    mostRecent={mostRecent}
    type={type}
  />
  <!-- Vista previa (inicialmente oculta) -->
  <div class='preview-container hidden'>
    <div class='mx-6 mb-4'>
      <div class='bg-zinc-800/50 rounded-xl border border-zinc-700/50 overflow-hidden'>
        <!-- Contenedor del iframe -->
        <div class='relative bg-zinc-900/50'>
          <!-- Loading spinner -->
          <div class='loading-spinner absolute inset-0 flex items-center justify-center'>
            <div class='flex items-center gap-3 text-zinc-400'>
              <div
                class='w-6 h-6 border-2 border-zinc-600 border-t-yellow-400 rounded-full animate-spin'
              >
              </div>
              <span class='text-sm'>Cargando vista previa...</span>
            </div>
          </div>

          <!-- Iframe -->
          <iframe
            class='preview-iframe w-full h-96 opacity-0 transition-opacity duration-500'
            frameborder='0'
            onload={`handleIframeLoad('${cardId}')`}></iframe>
        </div>
      </div>
    </div>
  </div>

  <!-- Botones de acción -->
  <div class='px-6 pb-6'>
    <div class='flex gap-2 justify-between items-end flex-col sm:flex-row'>
      <div class='flex gap-3 items-center flex-col sm:flex-row w-full sm:w-min'>
        <!-- Botón de Descarga -->
        <ContainerLink
          url={downloadUrl}
          class='group/download w-full sm:w-max bg-gradient-to-r from-yellow-400 to-yellow-500 hover:from-yellow-300 hover:to-yellow-400 text-black font-bold flex items-center justify-center gap-2 px-6 py-3 rounded-xl transition-all duration-300 hover:scale-105 active:scale-95 shadow-lg shadow-yellow-500/25 hover:shadow-yellow-500/40'
          target='_blank'
          rel='noopener noreferrer'
        >
          <IconDownload size={20} class='fill-primary-foreground' />
          Descargar
        </ContainerLink>

        <!-- Botón de Vista Previa -->
        <button
          onclick={`togglePreview('${cardId}', '${previewUrl}')`}
          class='preview-toggle cursor-pointer group/preview w-full sm:w-max bg-zinc-800/50 hover:bg-zinc-700/60 border border-zinc-700 hover:border-zinc-600 text-zinc-200 hover:text-white font-bold flex items-center justify-center gap-2 px-6 py-3 rounded-xl transition-all duration-300 hover:scale-105 active:scale-95'
          disabled={!fileId}
        >
          <IconVisibility size={20} class='icon-visibility fill-foreground' />
          <IconVisibilityOff size={20} class='hidden icon-visibilityOff fill-foreground' />

          <span class='button-text'>Vista Previa</span>
        </button>
      </div>

      {
        mostRecent && (
          <p class='hidden sm:flex text-sm py-2 px-4 bg-emerald-900/50 border border-emerald-500/30 text-emerald-300 rounded-full font-medium'>
            Más reciente
          </p>
        )
      }
    </div>
  </div>
</div>

<script>
  // Estado para trackear qué cards tienen preview abierto
  const previewStates = new Map();

  // Función para toggle de la vista previa
  function togglePreview(cardId: string, previewUrl?: string) {
    const card = document.getElementById(cardId);
    if (!card) return;

    const previewContainer = card.querySelector('.preview-container') as HTMLElement;
    const iframe = card.querySelector('.preview-iframe') as HTMLIFrameElement;
    const button = card.querySelector('.preview-toggle');
    const iconVisibility = card.querySelector('.icon-visibility');
    const iconVisibilityOff = card.querySelector('.icon-visibilityOff');
    const buttonText = button?.querySelector('.button-text');
    const loadingSpinner = card.querySelector('.loading-spinner');

    if (!previewContainer || !iframe || !button || !buttonText) return;

    const isOpen = previewStates.get(cardId) || false;

    if (!isOpen) {
      // Abrir vista previa
      if (previewUrl && previewUrl !== '#') {
        // Mostrar container con animación
        previewContainer.classList.remove('hidden');

        // Pequeño delay para la animación
        setTimeout(() => {
          previewContainer.style.maxHeight = previewContainer.scrollHeight + 'px';
          previewContainer.style.opacity = '1';
        }, 10);

        // Cargar iframe
        iframe.src = previewUrl;

        // Actualizar botón
        buttonText.textContent = 'Ocultar Vista';
        button.classList.add(
          'bg-red-800/50',
          'hover:bg-red-700/60',
          'border-red-700',
          'hover:border-red-600'
        );
        button.classList.remove(
          'bg-zinc-800/50',
          'hover:bg-zinc-700/60',
          'border-zinc-700',
          'hover:border-zinc-600'
        );
        iconVisibility?.classList.toggle('hidden');
        iconVisibilityOff?.classList.toggle('hidden');

        previewStates.set(cardId, true);
      }
    } else {
      iconVisibilityOff?.classList.toggle('hidden');
      iconVisibility?.classList.toggle('hidden');

      // Cerrar vista previa
      previewContainer.style.maxHeight = '0px';
      previewContainer.style.opacity = '0';

      setTimeout(() => {
        previewContainer.classList.add('hidden');
        iframe.src = '';
        if (loadingSpinner) {
          loadingSpinner.classList.remove('hidden');
        }
        iframe.classList.add('opacity-0');
      }, 300);

      // Restaurar botón
      buttonText.textContent = 'Vista Previa';
      button.classList.remove(
        'bg-red-800/50',
        'hover:bg-red-700/60',
        'border-red-700',
        'hover:border-red-600'
      );
      button.classList.add(
        'bg-zinc-800/50',
        'hover:bg-zinc-700/60',
        'border-zinc-700',
        'hover:border-zinc-600'
      );

      previewStates.set(cardId, false);
    }
  }

  // Función para manejar la carga del iframe
  function handleIframeLoad(cardId: string) {
    const card = document.getElementById(cardId);
    if (!card) return;

    const iframe = card.querySelector('.preview-iframe');
    const loadingSpinner = card.querySelector('.loading-spinner');

    if (iframe && loadingSpinner) {
      loadingSpinner.classList.add('hidden');
      iframe.classList.remove('opacity-0');
      iframe.classList.add('opacity-100');
    }
  }

  // Hacer las funciones globales
  (window as any).togglePreview = togglePreview;
  (window as any).handleIframeLoad = handleIframeLoad;

  // Estilos CSS adicionales para las animaciones
  const style = document.createElement('style');
  style.textContent = `
    .preview-container {
      max-height: 0;
      opacity: 0;
      overflow: hidden;
      transition: max-height 0.3s ease-out, opacity 0.3s ease-out;
    }
  `;
  document.head.appendChild(style);
</script>
